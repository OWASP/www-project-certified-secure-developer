
---

layout: col-sidebar
title: OWASP Certified Secure-Software Developer
tags: example-tag
level: 2
type: Certification
pitch: Curriculum

---

# OCSD curriculum - OWASP Certified Secure-Software Developer


# Scope web application security

# If I am hiring a web application developer, what are the security related skills I would look for?
# If I were a web application developer what security skills would I like to be validated for?

# 1. Authentication and authorisation
# 2. Session Management
# 3. Cryptography (certs, cert pinning, sharing keys, cipher suites)
# 4. DNS entries
# 5. Service discovery
# 6. Firewall rules
# 7. Input data validation
# 8. Output data encoding
# 9. Knowledge about application related security vulnerabilities
# 10. Database concepts
# 11. Error handling
# 12. Secrets handling (where should secrets be stored - code / configuration file / ???) sort of a negative question :-) 
# 13. What is SQL Injection
# 14. What is the difference between reflected XSS and persistent XSS
# 15. What is the best way to address XSS
# 16. HTTP Security headers
# 17. Hardening of other http headers
# 18. Privacy - what is PII and its protection
# 19. ASVS
# 20. Cornucopia
# 21. Cheat sheets

—--
# ASVS 4.0 Topics:

# 1. Architecture, Design, and Threat Modeling
# Security architecture fundamentals
# Secure design patterns
# Threat modeling (STRIDE, DREAD, etc.)
# Data flow diagrams and trust boundaries

# 2. Authentication
# Secure password storage (hashing, salting)
# Multi-factor authentication (MFA)
# Account lockout and recovery
# Credential rotation and expiration

# 3. Session Management
# Session timeout and renewal
# Secure cookie attributes (HttpOnly, Secure, SameSite)
# Session fixation prevention

# 4. Access Control
# Role-Based Access Control (RBAC)
# Attribute-Based Access Control (ABAC)
# Object-level authorization
# Least privilege principle

# 5. Validation, Sanitization, and Encoding
# Input validation (whitelisting vs. blacklisting)
# Output encoding (HTML, JavaScript, SQL)
# Server-side validation vs client-side
# Protection against injection attacks(SQL/JSON/LDAP/OS/LFI/RFI/XPath/XXE)

# 6. Stored Cryptography
# Key management best practices
# Encryption algorithms and secure usage (no custom home-grown cryptography, outdated/compromised algorithms,Insecure random values; digital signatures, HMAC)
# Secure storage of sensitive data (e.g., PII, health data,  credentials)

# 7. Error Handling and Logging
# Avoiding information leakage
# Secure logging practices
# Exception handling / sensitive errors
# Monitoring and alerting for anomalies

# 8. Data Protection
# TLS and secure transport
# Secure storage of sensitive data (e.g. no localStorage, sessionStorage, IndexedDB, or cookies)
# In-transit and at-rest encryption
# Caching headers
# Data retention / clear data on session termination 
# Secure APIs and data sharing
# GDPR and privacy considerations

# 9. Communications
# Secure protocol usage (TLS 1.2+, HTTPS)
# Secure headers (HSTS, CSP, etc.)
# Certificate validation and pinning

# 10. Malicious Code
# Dependency management and SCA (Software Composition Analysis)
# Supply chain risks
# Code injection protections
# Code signing / secure auto-updates
# Secure deserialization
# Subdomain takeover

# 11. Business Logic
# Preventing logic flaws (e.g., race conditions, privilege escalation)
# Anti-automation (e.g., CAPTCHA, rate limiting)
# Workflow validation / unusual events or activity monitoring

# 12. File and Resources
# Secure file uploads/downloads
# RFI/SSRF prevention
# Path traversal prevention
# MIME type validation

# 13. API and Web Services
# REST, GraphQL, and SOAP security
# Authentication and authorization for APIs
# Rate limiting and throttling

# 14. Configuration
# Secure default configurations
# SBOM
# Secrets management (env vars, vaults)
# Hardening environments / no debug mode /secure headers/CORS

—-----


# Cheat Sheets topics mapped to ASVS 

# V1: Architecture, Design and Threat Modeling Requirements
# V1.1 Secure Software Development Lifecycle Requirements
# V1.2 Authentication Architectural Requirements
# V1.3 Session Management Architectural Requirements
# V1.4 Access Control Architectural Requirements
# V1.5 Input and Output Architectural Requirements
# V1.6 Cryptographic Architectural Requirements
# V1.7 Errors, Logging and Auditing Architectural Requirements
# V1.8 Data Protection and Privacy Architectural Requirements
# V1.9 Communications Architectural Requirements
# V1.10 Malicious Software Architectural Requirements
# V1.11 Business Logic Architectural Requirements
# V1.12 Secure File Upload Architectural Requirements
# V1.13 API Architectural Requirements
# V1.14 Configuration Architectural Requirements
# V2: Authentication Verification Requirements

# V2.1 Password Security Requirements
# V2.2 General Authenticator Requirements
# V2.3 Authenticator Lifecycle Requirements
# V2.4 Credential Storage Requirements
# V2.5 Credential Recovery Requirements
# V2.6 Look-up Secret Verifier Requirements
# V2.7 Out of Band Verifier Requirements
# V2.8 Single or Multi Factor One Time Verifier Requirements
# V2.9 Cryptographic Software and Devices Verifier Requirements
# V2.10 Service Authentication Requirements

# V3: Session Management Verification Requirements
# V3.1 Fundamental Session Management Requirements
# V3.2 Session Binding Requirements
# V3.3 Session Logout and Timeout Requirements
# V3.4 Cookie-based Session Management
# V3.5 Token-based Session Management
# V3.6 Re-authentication from a Federation or Assertion
# V3.7 Defenses Against Session Management Exploits

# V4: Access Control Verification Requirements
# V4.1 General Access Control Design
# V4.2 Operation Level Access Control
# V4.3 Other Access Control Considerations

# V5: Validation, Sanitization and Encoding Verification Requirements
# V5.1 Input Validation Requirements
# V5.2 Sanitization and Sandboxing Requirements
# V5.3 Output encoding and Injection Prevention Requirements
# V5.4 Memory, String, and Unmanaged Code Requirements
# V5.5 Deserialization Prevention Requirements

# V6: Stored Cryptography Verification Requirements
# V6.1 Data Classification
# V6.2 Algorithms
# V6.3 Random Values
# V6.4 Secret Management

# V7: Error Handling and Logging Verification Requirements
# V7.1 Log Content Requirements
# V7.2 Log Processing Requirements
# V7.3 Log Protection Requirements
# V7.4 Error Handling

# V8: Data Protection Verification Requirements
# V8.1 General Data Protection
# V8.2 Client-side Data Protection
# V8.3 Sensitive Private Data

# V9: Communications Verification Requirements
# V9.1 Communications Security Requirements
# V9.2 Server Communications Security Requirements

# V10: Malicious Code Verification Requirements
# V10.1 Code Integrity Controls
# V10.2 Malicious Code Search
# V10.3 Deployed Application Integrity Controls

# V11: Business Logic Verification Requirements
# V11.1 Business Logic Security Requirements

# V12: File and Resources Verification Requirements
# V12.1 File Upload Requirements
# V12.2 File Integrity Requirements
# V12.3 File execution Requirements
# V12.4 File Storage Requirements
# V12.5 File Download Requirements
# V12.6 SSRF Protection Requirements

# V13: API and Web Service Verification Requirements
# V13.1 Generic Web Service Security Verification Requirements
# V13.2 RESTful Web Service Verification Requirements
# V13.3 SOAP Web Service Verification Requirements
# V13.4 GraphQL and other Web Service Data Layer Security Requirements

# V14: Configuration Verification Requirements
# V14.1 Build
# V14.2 Dependency
# V14.3 Unintended Security Disclosure Requirements
# V14.4 HTTP Security Headers Requirements
# V14.5 Validate HTTP Request Header Requirements

